---
title: "Orderly Tutorial"
author: "Rich FitzJohn"
format: revealjs
execute:
  echo: true
  error: true
  message: true
  output: true
  warning: true
project:
  execute-dir: workdir
---

```{r}
#| include: false
#| cache: false
source("support.R")
unlink("workdir", recursive = TRUE)
dir.create("workdir")
knitr::opts_knit$set(root.dir = "workdir")
```

# What is orderly?

::: {.incremental}
- A reproducible reporting framework
- A way of keeping track of versions of data
- A way of collaborating with other people
- A way of thinking about analysis
:::

## Original aims:

> “With orderly we have two main hopes:
>
> - analysts can write code that will straightforwardly run on someone else’s machine (or a remote machine)
> - when an analysis that is run several times starts behaving differently it will be easy to see when the outputs started changing, and what inputs started changing at the same time”

(~ 2018)

::: {.notes}
orderly requires a few conventions around organisation of a project, and after that tries to keep out of your way. However, these requirements are designed to make collaborative development with git easier by minimising conflicts and making backup easier by using an append-only storage system.
:::

## But what is it?

* A [package](https://mrc-ide.github.io/orderly2) designed to make analysis more reproducible
* A way of structuring your analysis so to make it easy to understand, run and reuse
* A set of tools that make it easy to:
  - track all **inputs** into an analysis (packages, code, and data resources)
  - store multiple **versions** of an analysis where it is repeated
  - track **outputs** of an analysis
  - create analyses that **depend** on the outputs of previous analyses

## Who uses it?

- Developed since May 2017 for the [Vaccine Impact Modelling Consortium](https://www.vaccineimpact.org/)
- Used in the 2018-2020 DRC Ebola responses
- Used in the COVID-19 response, especially within the "real time modelling" group
- Used within research groups (HIV, Malaria, possibly others?)

## Historical notes {.smaller}

* [`orderly`](https://vimc.github.io/orderly) (version 1)
  - Created for [Vaccine Impact Modelling Consortium](https://www.vaccineimpact.org/) and strongly focussed on **reproducible research**
  - Used [YAML](https://en.wikipedia.org/wiki/YAML) everywhere
  - Supported simple ways of working for a small centralised team
* [`orderly2`](https://mrc-ide.github.io/orderly2) (soon to be `orderly` 2.0.0)
  - A complete rewrite taking the best ideas from version 1 and dropping many less useful bits
  - Easier to program against
  - No more YAML
  - Focusses on **distributed collaborative analysis**
  - Also available as a [python package](https://pypi.org/project/pyorderly/)!

# Getting started

## Install `orderly2`

From the mrc-ide [r-universe](https://mrc-ide.r-universe.dev) (recommended)

```r
install.packages(
  "orderly2",
  repos = c("https://mrc-ide.r-universe.dev",
            "https://cloud.r-project.org"))
```

From GitHub using `remotes`:

```r
remotes::install_github("mrc-ide/orderly2")
```

From PyPi (for Python)

```r
pip install pyorderly
```

# My first orderly report / task

. . .

There is a discussion to have here about naming.  We might have this in a break...

## The setup

First, load the package and create a new empty orderly root.

```{r}
library(orderly2)
orderly_init()
```

. . .

What's in the box?

```{r}
fs::dir_tree()
```

## Create an empty report

```{r}
orderly_new("example")
```

...

Our contents now:

```{r}
fs::dir_tree()
```

## Hello orderly world

```{r}
#| include: false
writeLines('write.csv(data.frame(greeting = "hello", to = "world"),
  "hello.csv")', "src/example/example.R")
```

We have edited `src/example/example.R` to contain:

```{r}
#| echo: false
#| results: asis
r_output(readLines("src/example/example.R"))
```

Now we run

```{r}
orderly_run("example")
```
